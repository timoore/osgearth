/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MESH_EDIT_LAYER_H
#define OSGEARTH_MESH_EDIT_LAYER_H 1

#include <osgEarth/Common>
#include <osgEarth/Layer>
#include <osgEarth/Config>
#include <osgEarth/MaskSource>
#include <osgEarth/Containers>
#include <osg/Node>

namespace osgEarth
{
    class Map;

    /**
     * A MeshEditLayer is a specialized layer that allows lines and
     * polygons to be cut into the terrain mesh.
     */
    class OSGEARTH_EXPORT MeshEditLayer : public Layer
    {
    public: // serialization
        class OSGEARTH_EXPORT Options : public Layer::Options
        {
        public:
            META_LayerOptions(osgEarth, Options, Layer::Options);
            OE_OPTION(unsigned, minLevel);
            OE_OPTION(MeshEditSourceOptions, driver);
            virtual Config getConfig() const;
        private:
            void fromConfig( const Config& conf );
        };

    public:
        META_Layer_Abstract(osgEarth, MeshEditLayer, Options, Layer);

        //! Minimum terrain LOD at which mesh edits should apply
        void setMinLevel(unsigned value) { options().minLevel() = value; }
        unsigned getMinLevel() const { return options().minLevel().get(); }

    public:
        typedef Util::RefVector<osg::ref_ptr<osg::Vec3dArray>> EditVector;
        /** 
         * Gets the line segments to cut into the terrain. Each array
         * is a line string or a polygon (same beginning and end)
         * terrain to mask out.
         */
        virtual EditVector* getOrCreateEditGeometry(
            float                   heightScale,
            const SpatialReference* srs,
            ProgressCallback*       progress) { return 0L; }

    protected:

        /** dtor */
        virtual ~MeshEditLayer() { }
    };
    typedef std::vector<osg::ref_ptr<MeshEditLayer>> MeshEditLayerVector;
}

OSGEARTH_SPECIALIZE_CONFIG(osgEarth::MeshEditLayer::Options);


#endif
